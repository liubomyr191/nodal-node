"use strict";

module.exports = (function() {

  const Nodal = require('nodal');
  const bcrypt = Nodal.include.bcrypt;

  class User extends Nodal.Model {

    constructor(modelData, fromStorage) {

      this.validates('password', 'must be at least 5 characters in length', function(v) {
        return v && v.length >= 5;
      });

      super(modelData, fromStorage);

    }

    /* Model Extensions */

    save(db, callback) {

      let user = this;

      if (!user.hasErrors() && user.hasChanged('password')) {

        bcrypt.hash(user.get('password'), 10, function(err, hash) {

          if (err) {
            user.setError('password', 'Could not encrypt password');
          } else {
            user.set('password', hash, false);
          }

          Model.prototype.save.call(user, db, callback);

        });

      } else {

        Model.prototype.save.call(user, db, callback);

      }

    }

    verifyPassword(unencrypted, callback) {

      let user = this;

      bcrypt.compare(unencrypted, user.get('password'), function(err, result) {
        callback.call(user, err, result);
      });

    }

  }

  User.prototype.schema = Nodal.my.Schema.User;

  User.prototype.externalInterface = [
{{~ data.columns :value:index}}    '{{= value }}'{{? data.rows.length - 1 !== index }},{{?}}{{~}}
  ];

  return User;

})();
